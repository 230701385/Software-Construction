<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HMS Doctor Portal - Calendar</title>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <!-- FullCalendar CSS -->
    <!--  FullCalendar 5.10.2 CSS  -->
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.2/main.min.css">

    <style>
        /* Enhance button styles */
.fc-button-primary {
    background-color: #3498db !important;
    border-color: #2980b9 !important;
}

.fc-button-primary:hover {
    background-color: #2980b9 !important;
    border-color: #2573a7 !important;
}

.fc-button-active {
    background-color: #2c3e50 !important;
    border-color: #2c3e50 !important;
}

/* Debug outline to ensure calendar is visible */
#calendar {
  width: 100%;     
  min-height: 650px;          
  height: auto;
}
        :root {
            --primary: #3498db;
            --primary-dark: #2980b9;
            --secondary: #2c3e50;
            --success: #2ecc71;
            --warning: #f39c12;
            --danger: #e74c3c;
            --light: #f1f2f6;
            --dark: #2c3e50;
            --sidebar-width: 240px;
            --sidebar-collapsed-width: 70px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fa;
            color: #333;
        }

        /* Layout */
        .portal-container {
            display: flex;
            min-height: 100vh;
        }

        .sidebar {
            width: var(--sidebar-width);
            background-color: var(--secondary);
            color: white;
            transition: width 0.3s ease;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            z-index: 100;
        }

        .sidebar.collapsed {
            width: var(--sidebar-collapsed-width);
        }

        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            transition: margin-left 0.3s ease;
        }

        .main-content.expanded {
            margin-left: var(--sidebar-collapsed-width);
        }

        /* Sidebar */
        .sidebar-header {
            padding: 20px;
            text-align: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .sidebar-header h2 {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            font-size: 24px;
        }

        .user-info {
            padding: 20px;
            display: flex;
            align-items: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            background-color: var(--primary);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 12px;
        }

        .user-details {
            flex: 1;
        }

        .user-name {
            font-weight: bold;
            font-size: 16px;
        }

        .user-id {
            font-size: 14px;
            opacity: 0.8;
        }

        .nav-links {
            list-style: none;
            padding: 0;
        }

        .nav-links li a {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            color: white;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .nav-links li a i {
            margin-right: 12px;
            font-size: 18px;
            width: 24px;
            text-align: center;
        }

        .nav-links li a:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .nav-links li a.active {
            background-color: var(--primary);
        }

        .sidebar-footer {
            padding: 20px;
            position: absolute;
            bottom: 0;
            width: 100%;
        }
        #today-appointments {
  padding: 12px 15px;
}

        .logout-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: transparent;
            color: #e74c3c;
            border: 1.5px solid #e74c3c;
            padding: 12px;
            border-radius: 8px;
            cursor: pointer;
            width: 100%;
            transition: all 0.3s ease;
            font-weight: bold;
        }

        .logout-btn i {
            margin-right: 10px;
        }

        .logout-btn:hover {
            background-color: #e74c3c;
            color: white;
        }


        /* Topbar */
        .topbar {
            background-color: white;
            padding: 15px 25px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 90;
        }

        .menu-toggle {
            background: none;
            border: none;
            color: var(--dark);
            font-size: 20px;
            cursor: pointer;
            display: none;
        }

        .page-title h1 {
            font-size: 24px;
            color: var(--secondary);
            font-weight: 600;
        }

        .topbar-right {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .notification-btn {
            background: none;
            border: none;
            color: var(--dark);
            font-size: 20px;
            cursor: pointer;
            position: relative;
        }

        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: var(--danger);
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Page Content */
        .page-content {
            padding: 25px;
        }

        /* Card design */
        .card {
            border-radius: 12px;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            border-top: 4px solid var(--primary);
            background-color: white;
            margin-bottom: 25px;
        }

        .card-header {
            padding: 18px 20px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.08);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(145deg, rgba(255, 255, 255, 0.4) 0%, rgba(255, 255, 255, 0) 100%);
        }

        .card-title {
            margin: 0;
            color: var(--secondary);
            font-weight: 600;
        }

        .card-content {
            overflow: visible;
        }

        /* Calendar specific styling */
        #calendar {
            height: 650px;
            margin-bottom: 20px;
        }

        .calendar-views {
            display: flex;
            gap: 10px;
        }

        .calendar-view-btn {
            padding: 8px 15px;
            background-color: var(--light);
            color: var(--dark);
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .calendar-view-btn:hover {
            background-color: #e2e8f0;
        }

        .calendar-view-btn.active {
            background-color: var(--primary);
            color: white;
        }

        /* Status indicators */
        .appointment-legend {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 15px 0;
        }

        .legend-item {
            display: flex;
            align-items: center;
            font-size: 0.9rem;
        }

        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 6px;
        }

        .status-confirmed {
            background-color: var(--success);
        }

        .status-pending {
            background-color: var(--warning);
        }

        .status-cancelled {
            background-color: var(--danger);
        }

        /* Table styling */
        .table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 1rem;
        }

        .table th,
        .table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e9ecef;
        }

        .table th {
            font-weight: 600;
            color: var(--secondary);
            background-color: #f8f9fa;
        }

        .table tbody tr:hover {
            background-color: #f1f4f7;
        }

        .table-striped tbody tr:nth-of-type(odd) {
            background-color: rgba(0, 0, 0, 0.02);
        }

        /* Toast notification styling */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }

        .notification {
            display: flex;
            align-items: center;
            background-color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            margin-bottom: 10px;
            animation: slideIn 0.3s ease;
            max-width: 400px;
        }

        .notification-icon {
            margin-right: 12px;
            font-size: 1.2rem;
        }

        .notification-success .notification-icon {
            color: var(--success);
        }

        .notification-error .notification-icon {
            color: var(--danger);
        }

        .notification-info .notification-icon {
            color: var(--primary);
        }

        .notification.fade-out {
            animation: fadeOut 0.5s ease forwards;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes fadeOut {
            from {
                opacity: 1;
            }

            to {
                opacity: 0;
            }
        }

        /* Button styles */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 8px 16px;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
        }

        .btn-sm {
            padding: 4px 10px;
            font-size: 0.875rem;
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
        }

        .btn-success {
            background-color: var(--success);
            color: white;
        }

        .btn-danger {
            background-color: var(--danger);
            color: white;
        }

        /* Appointment modal */
        .appointment-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .appointment-modal-content {
            background-color: #fff;
            margin: 10% auto;
            padding: 0;
            width: 500px;
            max-width: 90%;
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            animation: modalFadeIn 0.3s;
        }

        .appointment-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background-color: var(--primary);
            color: white;
            border-top-left-radius: 12px;
            border-top-right-radius: 12px;
        }

        .appointment-modal-header h3 {
            margin: 0;
            font-weight: 600;
        }

        .appointment-modal-close {
            color: white;
            font-size: 1.5rem;
            font-weight: bold;
            cursor: pointer;
        }

        .appointment-modal-body {
            padding: 20px;
        }

        .appointment-details {
            margin-bottom: 20px;
        }

        .detail-row {
            display: flex;
            margin-bottom: 12px;
            border-bottom: 1px solid #eee;
            padding-bottom: 12px;
        }

        .detail-row:last-child {
            border-bottom: none;
            margin-bottom: 0;
        }

        .detail-label {
            width: 140px;
            font-weight: 600;
            color: #555;
        }

        .detail-value {
            flex: 1;
            color: #333;
        }

        .appointment-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 15px;
        }

        .patient-note {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 6px;
            min-height: 60px;
            resize: vertical;
            margin-top: 5px;
        }

        @keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Loading state */
        .loading-spinner {
            text-align: center;
            padding: 20px;
            color: var(--primary);
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .menu-toggle {
                display: block;
            }

            .sidebar {
                width: 0;
                position: fixed;
                left: -280px;
            }

            .sidebar.active {
                width: var(--sidebar-width);
                left: 0;
            }

            .main-content {
                margin-left: 0;
            }

            .detail-row {
                flex-direction: column;
            }

            .detail-label {
                width: 100%;
                margin-bottom: 5px;
            }

            .calendar-views {
                overflow-x: auto;
                padding-bottom: 5px;
            }

            #calendar {
                height: 500px;
            }
        }
    </style>
</head>

<body>
    <div class="portal-container">
        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h2><i class="fas fa-hospital"></i> <span>HMS</span></h2>
            </div>
            <div class="user-info">
                <div class="user-avatar"><%= doctor.name.charAt(4) %></div>
                <div class="user-details">
                    <div class="user-name"><%= doctor.name %></div>
                </div>
            </div>
            <ul class="nav-links">
                <li><a href="/doctor/dashboard"><i class="fas fa-th-large"></i> <span>Dashboard</span></a></li>
                <li><a href="/doctor/calendar" class="active"><i class="fas fa-calendar-check"></i>
                        <span>Calendar</span></a></li>
            </ul>
            <div class="sidebar-footer">
                <form action="/logout" method="POST">
                    <button class="logout-btn" type="submit">
                        <i class="fas fa-sign-out-alt"></i><span>Logout</span>
                    </button>
                </form>
            </div>
        </aside>

        <!-- Main Content Area -->
        <div class="main-content">
            <!-- Topbar -->
            <div class="topbar">
                <button id="menu-toggle" class="menu-toggle" onclick="toggleSidebar()">
                    <i class="fas fa-bars"></i>
                </button>
                <div class="page-title">
                    <h1>Appointment Calendar</h1>
                </div>
                <div class="topbar-right">
                    <button class="notification-btn">
                        <i class="fas fa-bell"></i>
                        <div class="notification-badge">2</div>
                    </button>
                    <span>Welcome,<%= doctor.name.split(' ')[1] %></span>
                </div>
            </div>

            <!-- Calendar Content -->
            <div class="page-content">
                <!-- Toast container -->
                <div class="toast-container"></div>

                <!-- Calendar Card -->
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">My Appointment Schedule</h2>
                    </div>
                    <div class="card-content">
                        <!-- Calendar legend -->
                        <div class="appointment-legend">
                            <div class="legend-item">
                                <span class="status-indicator status-confirmed"></span>
                                Confirmed
                            </div>
                            <div class="legend-item">
                                <span class="status-indicator status-pending"></span>
                                Pending
                            </div>
                            <div class="legend-item">
                                <span class="status-indicator status-cancelled"></span>
                                Cancelled
                            </div>
                        </div>

                        <!-- Calendar Container -->
                        <div id="calendar"></div>
                    </div>
                </div>

                <!-- Today's Appointments Card -->
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">Today's Appointments</h2>
                        <span id="today-date"></span>
                    </div>
                    <div class="card-content">
                        <div id="today-appointments">
                            <!-- This will be populated with appointments -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Appointment Details Modal -->
        <div id="appointmentModal" class="appointment-modal">
            <div class="appointment-modal-content">
                <div class="appointment-modal-header">
                    <h3>Appointment Details</h3>
                    <span class="appointment-modal-close">&times;</span>
                </div>
                <div class="appointment-modal-body">
                    <div class="appointment-details">
                        <div class="detail-row">
                            <div class="detail-label">Patient Name</div>
                            <div class="detail-value" id="modal-patient-name">-</div>
                        </div>
                        <div class="detail-row">
                            <div class="detail-label">Patient ID</div>
                            <div class="detail-value" id="modal-patient-id">-</div>
                        </div>
                        <div class="detail-row">
                            <div class="detail-label">Patient Age</div>
                            <div class="detail-value" id="modal-patient-age">-</div>
                        </div>
                        <div class="detail-row">
                            <div class="detail-label">Date & Time</div>
                            <div class="detail-value" id="modal-datetime">-</div>
                        </div>
                        <div class="detail-row">
                            <div class="detail-label">Purpose</div>
                            <div class="detail-value" id="modal-purpose">-</div>
                        </div>
                        <div class="detail-row">
                            <div class="detail-label">Status</div>
                            <div class="detail-value" id="modal-status">-</div>
                        </div>
                        <div class="detail-row">
                            <div class="detail-label">Doctor Notes</div>
                            <div class="detail-value">
                                <textarea id="modal-notes" class="patient-note"
                                    placeholder="Add notes about this appointment..."></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="appointment-actions">
                        <button class="btn btn-danger" id="btn-cancel-appointment">
                            <i class="fas fa-times-circle"></i> Cancel Appointment
                        </button>
                        <button class="btn btn-success" id="btn-save-notes">
                            <i class="fas fa-save"></i> Save Notes
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Load FullCalendar -->
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.2/main.min.js"></script>

    <script>
        // Get dynamic appointment data from server
        const rawAppointments = <%- JSON.stringify(appointmentsByDate) %>;
        const events = [];
        
        // Convert raw appointments to FullCalendar events format
        for (const date in rawAppointments) {
            rawAppointments[date].forEach(app => {
                let statusClass = 'pending';
                if (app.status === 'confirmed') statusClass = 'confirmed';
                if (app.status === 'cancelled') statusClass = 'cancelled';
                
                events.push({
                    id: app.id,
                    title: app.patientName + ' - ' + app.purpose,
                    start: `${date}T${app.time}`,
                    className: `status-${statusClass}`,
                    extendedProps: {
                        _id: app.id,
                        patientName: app.patientName,
                        patientId: app.patientId,
                        patientAge: app.patientAge,
                        purpose: app.purpose,
                        status: app.status,
                        time: app.time,
                        date: date,
                        doctorNotes: app.notes || ""
                    }
                });
            });
        }

        // Function to toggle sidebar
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.querySelector('.main-content');
            sidebar.classList.toggle('active');
        }

        // Function to show notifications
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <div class="notification-icon">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle'}"></i>
                </div>
                <div class="notification-content">${message}</div>
            `;

            // Add to container
            const container = document.querySelector('.toast-container');
            container.appendChild(notification);

            // Auto-remove after delay
            setTimeout(() => {
                notification.classList.add('fade-out');
                setTimeout(() => notification.remove(), 500);
            }, 3000);
        }

        // Function to open appointment modal
        function openAppointmentModal(event) {
            const appointmentDetails = event.extendedProps || event;

            // Set appointment details in modal
            document.getElementById('modal-patient-name').textContent = appointmentDetails.patientName || 'N/A';
            document.getElementById('modal-patient-id').textContent = appointmentDetails.patientId || 'N/A';
            document.getElementById('modal-patient-age').textContent = appointmentDetails.patientAge || 'N/A';

            // Format date and time for display
            let dateObj;
            let timeStr;
            if (typeof event.start === 'object') {
                // FullCalendar date object
                dateObj = event.start;
                timeStr = dateObj.toLocaleTimeString('en-US', {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: true
                });
            } else {
                // Raw date string from JSON
                dateObj = new Date(`${appointmentDetails.date}T${appointmentDetails.time}`);
                timeStr = appointmentDetails.time;
            }
            
            const dateStr = dateObj.toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            
            document.getElementById('modal-datetime').textContent = `${dateStr} at ${timeStr}`;
            document.getElementById('modal-purpose').textContent = appointmentDetails.purpose || 'Regular checkup';
            document.getElementById('modal-status').textContent =
                appointmentDetails.status.charAt(0).toUpperCase() + appointmentDetails.status.slice(1) || 'Pending';
            document.getElementById('modal-notes').value = appointmentDetails.doctorNotes || '';

            // Set appointment ID as data attribute for the save buttons
            document.getElementById('btn-save-notes').setAttribute('data-appointment-id', appointmentDetails._id);
            document.getElementById('btn-cancel-appointment').setAttribute('data-appointment-id', appointmentDetails._id);

            // Show or hide cancel button based on appointment status
            if (appointmentDetails.status === 'cancelled') {
                document.getElementById('btn-cancel-appointment').style.display = 'none';
            } else {
                document.getElementById('btn-cancel-appointment').style.display = 'inline-block';
            }

            // Show modal
            document.getElementById('appointmentModal').style.display = 'block';
        }

        // Function to load today's appointments
        function loadTodaysAppointments() {
            const todayAppointmentsContainer = document.getElementById('today-appointments');

            // Filter appointments for today
            const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
            const todayAppointments = [];
            
            // Find all appointments for today from our events array
            events.forEach(event => {
                if (event.start.startsWith(today)) {
                    todayAppointments.push({
                        ...event.extendedProps,
                        startTime: event.start.split('T')[1]
                    });
                }
            });

            if (todayAppointments.length === 0) {
                todayAppointmentsContainer.innerHTML = '<p>No appointments scheduled for today.</p>';
                return;
            }

            // Sort appointments by time
            todayAppointments.sort((a, b) => a.time.localeCompare(b.time));

            let html = '<table class="table table-bordered table-striped">';
            html += '<thead><tr><th>Time</th><th>Patient</th><th>Purpose</th><th>Status</th><th>Actions</th></tr></thead>';
            html += '<tbody>';

            todayAppointments.forEach(appointment => {
                // Format time for display if needed
                const timeDisplay = appointment.time;

                // Determine status class
                let statusClass = 'status-pending';
                if (appointment.status === 'confirmed') statusClass = 'status-confirmed';
                if (appointment.status === 'cancelled') statusClass = 'status-cancelled';

                html += `<tr>
                    <td>${timeDisplay}</td>
                    <td>${appointment.patientName}</td>
                    <td>${appointment.purpose}</td>
                    <td><span class="status-indicator ${statusClass}"></span> ${appointment.status.charAt(0).toUpperCase() + appointment.status.slice(1)}</td>
                    <td>
                        <button class="btn btn-sm btn-primary" onclick='openAppointmentModal(${JSON.stringify(appointment)})'>
                            <i class="fas fa-eye"></i> View
                        </button>
                    </td>
                </tr>`;
            });

            html += '</tbody></table>';
            todayAppointmentsContainer.innerHTML = html;

            // Set today's date
            document.getElementById('today-date').textContent = new Date().toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }

        // Updated calendar initialization code
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM fully loaded");
    
    // Get dynamic appointment data from server
    const rawAppointments = <%- JSON.stringify(appointmentsByDate) %>;
    console.log("Raw appointments data:", rawAppointments);
    
    const events = [];
    
    // Convert raw appointments to FullCalendar events format
    for (const date in rawAppointments) {
        rawAppointments[date].forEach(app => {
            let statusClass = 'pending';
            if (app.status === 'confirmed') statusClass = 'confirmed';
            if (app.status === 'cancelled') statusClass = 'cancelled';
            
            events.push({
                id: app.id,
                title: app.patientName + ' - ' + app.purpose,
                start: `${date}T${app.time}`,
                className: `status-${statusClass}`,
                extendedProps: {
                    _id: app.id,
                    patientName: app.patientName,
                    patientId: app.patientId,
                    patientAge: app.patientAge,
                    purpose: app.purpose,
                    status: app.status,
                    time: app.time,
                    date: date,
                    doctorNotes: app.notes || ""
                }
            });
        });
    }
    
    console.log("Events prepared for calendar:", events.length, events);
    
    // Add test event if no events available
    if (events.length === 0) {
        console.log("No appointments found, adding test event");
        // Add a test event
        const today = new Date();
        const todayStr = today.toISOString().split('T')[0];
        events.push({
            id: 'test-event',
            title: 'Test Patient - Check-up',
            start: `${todayStr}T10:00:00`,
            className: 'status-confirmed',
            extendedProps: {
                _id: 'test-event',
                patientName: 'Test Patient',
                patientId: 'test-123',
                patientAge: 30,
                purpose: 'Check-up',
                status: 'confirmed',
                time: '10:00',
                date: todayStr,
                doctorNotes: "Test notes"
            }
        });
    }

    try {
        console.log("Calendar initialization starting...");
        const calendarEl = document.getElementById('calendar');
        
        if (!calendarEl) {
            console.error("Calendar element not found in DOM!");
            return;
        }
        
        // Apply inline styles to ensure visibility
        calendarEl.style.height = '650px';
        calendarEl.style.border = '1px solid #ddd';
        calendarEl.style.position = 'relative';
        calendarEl.style.zIndex = '1';
        calendarEl.style.backgroundColor = '#fff';
        
        // Initialize FullCalendar
        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            height: 'auto', // Let it adapt to container
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay'
            },
            events: events,
            eventClick: function(info) {
                console.log("Event clicked:", info.event);
                openAppointmentModal(info.event);
            },
            eventClassNames: function(arg) {
                // Add appropriate styling based on the appointment status
                let classes = [];
                if (arg.event.extendedProps.status === 'confirmed') {
                    classes.push('status-confirmed');
                } else if (arg.event.extendedProps.status === 'cancelled') {
                    classes.push('status-cancelled');
                } else {
                    classes.push('status-pending');
                }
                return classes;
            },
            eventTimeFormat: {
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
            },
            // Add explicit color-coding for better visibility
            eventDidMount: function(info) {
                // Add background color based on status
                if (info.event.extendedProps.status === 'confirmed') {
                    info.el.style.backgroundColor = '#2ecc71';
                    info.el.style.borderColor = '#27ae60';
                } else if (info.event.extendedProps.status === 'cancelled') {
                    info.el.style.backgroundColor = '#e74c3c';
                    info.el.style.borderColor = '#c0392b';
                } else {
                    info.el.style.backgroundColor = '#f39c12';
                    info.el.style.borderColor = '#e67e22';
                }
                // Ensure text is readable
                info.el.style.color = 'white';
                info.el.style.fontWeight = 'bold';
            },
            // Add more interactive options
            dayMaxEvents: true, // Allow "more" link when too many events
            selectable: true,
            selectMirror: true
        });
        
        // Attempt to render the calendar
        try {
            calendar.render();
            console.log("Calendar rendered successfully");
        } catch (renderError) {
            console.error("Error rendering calendar:", renderError);
        }
        
        // Load today's appointments
        loadTodaysAppointments();
        
        // Setup UI event handlers
        setupEventHandlers(calendar);
        
    } catch (error) {
        console.error("Error in calendar setup:", error);
        // Show error in the calendar container for debugging
        const calendarEl = document.getElementById('calendar');
        if (calendarEl) {
            calendarEl.innerHTML = `<div style="padding: 20px; color: red;">
                <h3>Error Loading Calendar</h3>
                <p>${error.message}</p>
                <p>Please check the console for more details.</p>
            </div>`;
        }
    }
});

// Function to setup all event handlers for the modal
function setupEventHandlers(calendar) {
    // Close modal when clicking on the close button or outside the modal
    document.querySelector('.appointment-modal-close').addEventListener('click', function() {
        document.getElementById('appointmentModal').style.display = 'none';
    });
    
    window.addEventListener('click', function(event) {
        const modal = document.getElementById('appointmentModal');
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
    
    // Handle appointment actions
    document.getElementById('btn-save-notes').addEventListener('click', function() {
        const appointmentId = this.getAttribute('data-appointment-id');
        const notes = document.getElementById('modal-notes').value;
        
        // Send request to save notes
        fetch('/doctor/appointments/save-notes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                appointmentId: appointmentId,
                notes: notes
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('Notes saved successfully', 'success');
                
                // Update the event data
                const event = calendar.getEventById(appointmentId);
                if (event) {
                    event.setExtendedProp('doctorNotes', notes);
                }
            } else {
                showNotification('Failed to save notes', 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('An error occurred while saving notes', 'error');
        });
        
        // Close the modal
        document.getElementById('appointmentModal').style.display = 'none';
    });
    
    document.getElementById('btn-cancel-appointment').addEventListener('click', function() {
        const appointmentId = this.getAttribute('data-appointment-id');
        
        if (confirm('Are you sure you want to cancel this appointment?')) {
            // Send request to cancel appointment
            fetch('/doctor/appointments/cancel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    appointmentId: appointmentId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification('Appointment cancelled successfully', 'success');
                    
                    // Update the event in the calendar
                    const eventToUpdate = calendar.getEventById(appointmentId);
                    if (eventToUpdate) {
                        eventToUpdate.setProp('className', 'status-cancelled');
                        eventToUpdate.setExtendedProp('status', 'cancelled');
                        // Update color
                        const el = eventToUpdate.el;
                        if (el) {
                            el.style.backgroundColor = '#e74c3c';
                            el.style.borderColor = '#c0392b';
                        }
                    }
                    
                    // Reload today's appointments to reflect changes
                    loadTodaysAppointments();
                } else {
                    showNotification('Failed to cancel appointment', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('An error occurred while cancelling the appointment', 'error');
            });
            
            // Close the modal
            document.getElementById('appointmentModal').style.display = 'none';
        }
    });
}
    </script>
</body>

</html>